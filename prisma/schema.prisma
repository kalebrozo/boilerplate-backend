generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String   @id @default(cuid())
  name      String   @unique
  schema    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  testeGeral TesteGeral[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  testeGeralCriadoPor     TesteGeral[] @relation("TesteGeralCriadoPor")
  testeGeralAtualizadoPor TesteGeral[] @relation("TesteGeralAtualizadoPor")
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  users       User[]
  permissions Permission[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Permission {
  id        String   @id @default(cuid())
  action    String
  subject   String
  roles     Role[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([action, subject])
}

model AuditLog {
  id         String    @id @default(cuid())
  userId     String
  tenantId   String
  action     String
  subject    String
  subjectId  String?
  dataBefore Json?
  dataAfter  Json?
  clientInfo Json?
  createdAt  DateTime  @default(now())
}

model RequestLog {
  id           String   @id @default(cuid())
  tenantId     String?
  userId       String?
  endpoint     String
  method       String
  statusCode   Int
  responseTime Int      // em milissegundos
  userAgent    String?
  ip           String?
  createdAt    DateTime @default(now())

  @@index([tenantId])
  @@index([endpoint])
  @@index([createdAt])
  @@map("request_logs")
}

model TesteGeral {
  id              String    @id @default(cuid())
  nome            String
  descricao       String?
  valorDecimal    Decimal   @db.Decimal(10, 2)
  valorInteiro    Int
  valorFloat      Float
  ativo           Boolean   @default(true)
  status          Status    @default(ATIVO)
  categoria       Categoria @default(OUTROS)
  dataCriacao     DateTime  @default(now())
  dataAtualizacao DateTime  @updatedAt
  dataVencimento  DateTime?
  horaInicio      DateTime?
  duracao         Int? // em minutos
  tags            String[]
  metadados       Json?
  configuracao    Json?
  email           String?   @unique
  telefone        String?
  website         String?
  cep             String?
  endereco        Json?
  coordenadas     Json?
  arquivoNome     String?
  arquivoTamanho  Int?
  arquivoTipo     String?
  arquivoUrl      String?
  tenantId        String?
  tenant          Tenant?   @relation(fields: [tenantId], references: [id])
  criadoPorId     String?
  criadoPor       User?     @relation("TesteGeralCriadoPor", fields: [criadoPorId], references: [id])
  atualizadoPorId String?
  atualizadoPor   User?     @relation("TesteGeralAtualizadoPor", fields: [atualizadoPorId], references: [id])

  @@map("teste_geral")
}

enum Status {
  ATIVO
  INATIVO
  PENDENTE
  CANCELADO
  CONCLUIDO
}

enum Categoria {
  TECNOLOGIA
  FINANCEIRO
  SAUDE
  EDUCACAO
  VENDAS
  MARKETING
  OPERACOES
  OUTROS
}